package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"survey/graph/dal"
	"survey/graph/model"
)

// CreateSurvey is the resolver for the createSurvey field.
func (r *mutationResolver) CreateSurvey(ctx context.Context, input model.SurveyInput) (*model.Survey, error) {
	svc := dal.NewSurveyService(dal.NewSurveyRepository(r.Db))
	survey, err := svc.CreateSurvey(ctx, &input)
	if err != nil {
		return nil, err
	}

	return survey, nil
}

// UpdateSurvey is the resolver for the updateSurvey field.
func (r *mutationResolver) UpdateSurvey(ctx context.Context, id string, input model.SurveyInput) (*model.Survey, error) {
	svc := dal.NewSurveyService(dal.NewSurveyRepository(r.Db))
	survey, err := svc.UpdateSurvey(ctx, id, &input)
	if err != nil {
		return nil, err
	}

	return survey, nil
}

// Surveys is the resolver for the surveys field.
func (r *queryResolver) Surveys(ctx context.Context) ([]*model.Survey, error) {
	svc := dal.NewSurveyService(dal.NewSurveyRepository(r.Db))
	surveys, err := svc.GetSurveys()
	if err != nil {
		return nil, err
	}

	return surveys, nil
}

// Survey is the resolver for the survey field.
func (r *queryResolver) Survey(ctx context.Context, id string) (*model.Survey, error) {
	svc := dal.NewSurveyService(dal.NewSurveyRepository(r.Db))
	survey, err := svc.GetSurveyByID(id)
	if err != nil {
		return nil, err
	}

	return survey, nil
}

// Options is the resolver for the options field.
func (r *questionResolver) Options(ctx context.Context, obj *model.Question) ([]*model.Option, error) {
	svc := dal.NewSurveyService(dal.NewSurveyRepository(r.Db))
	options, err := svc.GetOptionsByQuestionID(obj.ID)
	if err != nil {
		return nil, err
	}

	return options, nil
}

// Questions is the resolver for the questions field.
func (r *surveyResolver) Questions(ctx context.Context, obj *model.Survey) ([]*model.Question, error) {
	svc := dal.NewSurveyService(dal.NewSurveyRepository(r.Db))
	questions, err := svc.GetQuestionsBySurveyID(obj.ID)
	if err != nil {
		return nil, err
	}

	return questions, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Question returns QuestionResolver implementation.
func (r *Resolver) Question() QuestionResolver { return &questionResolver{r} }

// Survey returns SurveyResolver implementation.
func (r *Resolver) Survey() SurveyResolver { return &surveyResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type questionResolver struct{ *Resolver }
type surveyResolver struct{ *Resolver }
